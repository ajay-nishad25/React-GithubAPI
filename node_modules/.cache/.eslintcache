[{"E:\\program\\WEB-DEV\\Lecture16 React\\my-app\\src\\index.js":"1","E:\\program\\WEB-DEV\\Lecture16 React\\my-app\\src\\App.js":"2","E:\\program\\WEB-DEV\\Lecture16 React\\my-app\\src\\Card.jsx":"3","E:\\program\\WEB-DEV\\Lecture16 React\\my-app\\src\\RepoCard.jsx":"4"},{"size":210,"mtime":1685348371283,"results":"5","hashOfConfig":"6"},{"size":5531,"mtime":1685733396838,"results":"7","hashOfConfig":"6"},{"size":643,"mtime":1685731982688,"results":"8","hashOfConfig":"6"},{"size":824,"mtime":1685727406956,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},"1nj73n5",{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17"},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},"E:\\program\\WEB-DEV\\Lecture16 React\\my-app\\src\\index.js",[],[],[],"E:\\program\\WEB-DEV\\Lecture16 React\\my-app\\src\\App.js",["24","25","26"],[],"import { useState } from \"react\";\nimport \"./App.css\";\nimport axios from \"axios\";\nimport Card from \"./Card.jsx\";\nimport RepoCard from \"./RepoCard\";\n\nfunction App() {\n\n  // useState()\n  const [getText, setText] = useState();\n  const [getData, setData] = useState([]);\n\n  // below code is only to know total count response.data provide \n  const [totalRepo, setRepo] = useState([]);\n\n  //repo data\n  const [getRepoData, setRepoData] = useState([]);\n\n  // profile data\n  const [getUserData , setProfielData] = useState([]);\n\n  // visible\n  const [getVisibility, setVisibility] = useState(true);\n\n\n  // input onChange\n  const handleOnChange = (event) => {\n    if(event.target.value !== \"\"){\n      setText(event.target.value);\n    }\n  }\n\n  // onSubmit\n  const handleSubmit = (event) => {\n    event.preventDefault();\n\n    if (!getText) {\n      alert(\"Input field is empty\");\n      return;\n    }\n\n    console.log(\"Search keyword =>\",getText);\n    try {\n      async function getGeneralData() {\n        const response = await axios.get(`https://api.github.com/search/users?q=${getText}`);\n        setData(response.data.items);\n        setRepo(response.data);\n      }\n      getGeneralData();\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  // onClicking card component\n  const handleCardClick = (name) => {\n    // console.log(\"this card has been clicked\", name);\n    // for repo i.e right-div\n    try{\n      async function getMoreData(){\n        const response = await axios.get(`https://api.github.com/users/${name}/repos`);\n        setRepoData(response.data);\n        // console.log(response.data.length);\n        if(response.data.length !== 0){\n          setVisibility(false);\n        }else{\n          setVisibility(true);\n        }\n        // console.log(response.data);\n        // response.data.map((currentElement)=>{\n        //   console.log(currentElement.name);\n        // })\n        // console.log(getRepoData);\n      }\n      getMoreData();\n    }catch(error){\n      console.log(\"error at getMoreData()\",error);\n    }\n\n    // for left-div\n    try{\n      async function getProfileData(){\n        const response = await axios.get(`https://api.github.com/users/${name}`);\n        // console.log(response.data);\n        setProfielData(response.data);\n        // console.log(getUserData);\n      }\n      getProfileData();\n    }catch(error){\n      console.log(\"error at getProfileData()\",error);\n    }\n\n  }\n\n  return (\n    <>\n    <div className=\"main-container\">\n\n      {/* Left div */}\n      <div className=\"App\">\n          <form>\n            {/* <h1>Search GitHub Users and Their Repositories</h1> */}\n            <h5>Search username : {\" \"}  \n              <input type=\"text\" width=\"20px\" height=\"20px\" placeholder =\"e.g ajay-nishad25\" onChange={handleOnChange} />\n            </h5>\n            <h3 style={{textAlign:\"center\"}}><button type=\"submit\" onClick={handleSubmit}>Search</button></h3>\n          </form>\n          <li>\n          <p style={{marginLeft:\"2px\"}}>Total Count : <span style={{color:\"red\"}}>{totalRepo.total_count}</span></p>\n          </li>\n          \n          \n          <li className=\"about-profile\">\n            <h3 style={{textAlign:\"center\"}}><img className=\"circle-image\" src={getUserData.avatar_url} alt=\"user-image\" height=\"150px\" width=\"150px\"/></h3>\n            <p>Username : {getUserData.login}</p>\n            <p>Name : {getUserData.name}</p>\n            <p>Bio : {getUserData.bio} </p>\n            <p>Company : {getUserData.company} </p>\n            <p>Location : {getUserData.location} </p>\n            <p>Total public repo : {getUserData.public_repos} </p>\n            <p>Created on : {getUserData.created_at} </p>\n            <p>followers : {getUserData.followers} </p>\n            <p>following : {getUserData.following} </p>\n            <p>Visit github :<a href={getUserData.html_url}>{getUserData.html_url}</a></p>\n          </li>\n      </div>\n\n      {/* Center Div */}\n      <div className=\"lower-div\">\n        { getData &&\n          getData.map((currentElement)=>{\n            {/* console.log(currentElement); */}\n            return (\n              <div style={{display:\"inline\"}} onClick={()=>{handleCardClick(currentElement.login)}} key={currentElement.id}>\n                <Card\n                key={currentElement.id}\n                image={currentElement.avatar_url}\n                name={currentElement.login}\n                url={currentElement.html_url}\n                id = {currentElement.id}\n                />\n              </div>\n            );\n          })\n        }\n      </div>\n\n      {/* Right Div */}\n      <div className=\"last-div\">\n        <h3 style={{marginTop:\"0px\"}}>Repo Details</h3>\n        {getVisibility===true ? <h4 style={{color:\"red\"}}>No repo present</h4> : <h1 style={{visibility:\"hidden\",fontSize:\"1px\"}}>Repo present</h1>}\n        { \n          getRepoData && getRepoData.map((currentElement)=>{\n            {/* console.log(getRepoData.length); */}\n            return(\n              <div>\n                <RepoCard \n                  key={currentElement.id}\n                  name={currentElement.name}\n                  desc = {currentElement.description}\n                  url={currentElement.html_url}\n                  lang={currentElement.language}\n                  create={currentElement.created_at}\n                  updated={currentElement.updated_at}\n                  pushed={currentElement.pushed_at}\n                />\n              </div>\n            );\n          })\n        }\n      </div>\n    </div>\n    </>\n  );\n}\n\nexport default App;\n\n","E:\\program\\WEB-DEV\\Lecture16 React\\my-app\\src\\Card.jsx",["27","28"],[],"E:\\program\\WEB-DEV\\Lecture16 React\\my-app\\src\\RepoCard.jsx",["29"],[],{"ruleId":"30","severity":1,"message":"31","line":114,"column":46,"nodeType":"32","endLine":114,"endColumn":152},{"ruleId":"33","severity":1,"message":"34","line":132,"column":13,"nodeType":"35","messageId":"36","endLine":132,"endColumn":49},{"ruleId":"33","severity":1,"message":"34","line":154,"column":13,"nodeType":"35","messageId":"36","endLine":154,"endColumn":53},{"ruleId":"30","severity":1,"message":"31","line":8,"column":50,"nodeType":"32","endLine":8,"endColumn":145},{"ruleId":"37","severity":1,"message":"38","line":11,"column":32,"nodeType":"32","messageId":"39","endLine":11,"endColumn":68,"fix":"40"},{"ruleId":"37","severity":1,"message":"38","line":10,"column":32,"nodeType":"32","messageId":"39","endLine":10,"endColumn":68,"fix":"41"},"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You donâ€™t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" (which implies rel=\"noopener\") is a security risk in older browsers: see https://mathiasbynens.github.io/rel-noopener/#recommendations","noTargetBlankWithoutNoreferrer",{"range":"42","text":"43"},{"range":"44","text":"43"},[487,487]," rel=\"noreferrer\"",[445,445]]